<Project>

  <PropertyGroup>
    <AssemblyName>FParsec</AssemblyName>
    <RootNamespace>FParsec</RootNamespace>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Tailcalls>false</Tailcalls>
    <OtherFlags>/nooptimizationdata</OtherFlags>
  </PropertyGroup>

  <PropertyGroup>
    <Summary>FParsec is a parser combinator library for F#.</Summary>
    <PackageTags>$(PackageTags);parser;combinator;f#;fsharp;c#;csharp;parsec;fparsec</PackageTags>
    <Description>$(Summary)

You can find comprehensive documentation for FParsec at http://www.quanttec.com/fparsec. The documentation includes a feature list, a tutorial, a user’s guide and an API reference.</Description>
    <Description Condition="'$(LowTrust)' == 'true'">$(Description)

This package uses the basic “low-trust” configuration of FParsec, which does not use any unverifiable code and is optimized for maximum portability. If you need to parse very large files or if you employ FParsec for performance-critical jobs, consider using the alternate “Big Data Edition” NuGet package (see https://nuget.org/packages/fparsec-big-data-edition).</Description>
    <Description Condition="'$(LowTrust)' == 'false'">$(Description)

This package uses a configuration of FParsec that supports very large input streams and is optimized for maximum performance in longer running processes. See http://www.quanttec.com/fparsec/download-and-installation.html for more information.

This version of FParsec is currently not compatible with .NET Core. If you want to use .NET Core, please choose the other FParsec NuGet package instead (see https://nuget.org/packages/fparsec).</Description>
  </PropertyGroup>

  <PropertyGroup Condition="'$(LowTrust)' == 'false'">
    <PackageId>FParsec-Big-Data-Edition</PackageId>
    <DefineConstants>$(DefineConstants);USE_STATIC_MAPPING_FOR_IS_ANY_OF</DefineConstants>
  </PropertyGroup>

  <Import Project="..\Build\FParsec.Common.targets" />

  <ItemGroup>
    <None Include="FParsec.targets" />
    <Compile Include="AssemblyInfo.fs" />
    <Compile Include="Internals.fs" />
    <Compile Include="Range.fs" />
    <Compile Include="Emit.fs" />
    <Compile Include="StaticMapping.fsi" />
    <Compile Include="StaticMapping.fs" />
    <Compile Include="Error.fsi" />
    <Compile Include="Error.fs" />
    <Compile Include="Primitives.fsi" />
    <Compile Include="Primitives.fs" />
    <Compile Include="CharParsers.fsi" />
    <Compile Include="CharParsers.fs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Update="FSharp.Core" Version="4.3.4" />
  </ItemGroup>

  <!-- HACK that makes msbuild include the FParsecCS project output in the  
       FParsec NuGet package, see https://github.com/NuGet/Home/issues/3891 -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeFParsecCSOutput</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="IncludeFParsecCSOutput">
    <ItemGroup>
      <BuildOutputInPackage Include="$(MSBuildProjectDirectory)/$(OutputPath)FParsecCS.dll" />
      <BuildOutputInPackage Include="$(MSBuildProjectDirectory)/$(OutputPath)FParsecCS.pdb" />
      <BuildOutputInPackage Include="$(MSBuildProjectDirectory)/$(OutputPath)FParsecCS.xml" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="System.Memory" Version="4.5.5" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
  </ItemGroup>

</Project>
